return integer
export(argument, env list)
{
	envs
	index
	variable
	value

	argument + length of "export "
	if argument's zero is null
		return {print env list for export}(env list)
	envs is result of split argument by ' '
	index is zero
	while envs's index is not null
	{
		variable is {get variable}(envs's index)
		value is {get value}(env's index)
		if {change value}(env list, variable, value) is false
			{add variable}(env list, variable, value)
		index increase one
	}
	return success
}

return integer
print env list for export(env list)
{
	while env list is not null
	{
		print "declare -x " to stdout
		print env list's variable to stdout
		if env list's value is not null
			print \" and env list's value and \" to stdout
		print new line to stdout
		env list is env list's next
	}
}

return string
get variable(env string)
{
	size
	variable

	size is zero
	while env string's size is not null and env string's size is not '='
		size increase one
	malloc size to variable
	if variable is null
		exit
	copy env string to variable
	return variable
}

return string
get value(env string)
{
	size
	value

	size is zero
	while env string's size is not null and env string's size is not '='
		size increase one
	size is zero
	while env string's size is not null
		size increase one
	size is zero
		return null
	malloc size value
	if value is null
		exit
	copy env string to value
	return value
}

return bool
change value(env list, variable value)
{
	p list

	p list is env list
	while p list is not null
	{
		if p list's variable is variable
		{
			free p list's value
			p list's value is value
			return true
		}
		p list is p list's next
	}
	return false
}

return void
add variable(env list, variable, value)
{
	new env
	last env

	malloc new env
	if new env is null
		exit fail
	new env's variable is variable
	new env's value is value
	new env's next is null
	if env list is null
		env list is new env
	else
	{
		last env is env list
		while last env's next is not null
			last env is lase env's next
		last env's next is new env
	}
}
