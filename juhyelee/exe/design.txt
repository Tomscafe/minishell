명령어는 파싱부에서 트리 구조로 들어옴
PIPE1 first(com)cmd (word)option and args (rd)< or > or << or >>
	  second(com)cmd (word)option and args (rd)< or > or << or >>
PIPE2 first(com)cmd (word)option and args (rd)< or > or << or >>
	  second(com)cmd (word)option and args (rd)< or > or << or >>
PIPE3 first(com)cmd (word)option and args (rd)< or > or << or >>
	  second(com)cmd (word)option and args (rd)< or > or << or >>
...

PIPEn first(com)cmd (word)option and args (rd)< or > or << or >>
	  second(com)cmd (word)option and args (rd)< or > or << or >>
	  or
	  second(com)(null) (word)(null) (rd)(null) 

structures
{
	redirection(linked list) : symbol(string), file(string)
	simple : command(string), word(stirng) // word는 명령어 인자값(option 포함)
	command : simple command(simple), redirection(redirection)
	pipe(linked list + tree) : first command(command), second command(command)
}

exe structures
{
	pipe pointer, number of command, command index, pipe fd, prev fd
}

return void
execute(constant pipe tree)
{
	exe structures command
	
	pipe pointer of command is first of pipe tree
	get number of command
	command index of command is zero
	if number of command is one
		execute first command
	while command is not over number of command - 1
		execute first command
	if number of command is not one
		execute second command
}

return size_t
get number of command(constant pipe start pointer)
{
	size_t number of command
	pipe pointer

	number of command
	pipe pointer is pipe start pointer
	while pipe pointer is not null
	{
		number of command increase one
		pipe pointer is next of pipe pointer
	}
	return number of command
}

return void
execute command(exe structures, command string)
{
	if command string is builtin
		execute builtin
	else
		execute at child
	pipe pointer of exe structures is next pipe pointer itself
	command index of exe structures increase one
}

return int
is builtin(command string)
{
	if command string is echo
		return true
	if command string is cd
		return true
	if command string is pwd
		return true
	if command string is export
		return true
	if command string is unset
		return true
	if command string is env
		return true
	if command string is exit
		return true
	return false
}

return void
execute builtin(exe structures)
{
	if command string of exe structures is echo
		run echo
	if command string of exe structures is cd
		run cd
	if command string of exe structures is pwd
		run pwd
	if command string of exe structures is export
		run export
	if command string of exe structures is unset
		run unset
	if command string of exe structures is env
		run env
	if command string of exe structures is exit
		run exit
}

return void
run exit(exe structures)
{
	if number of command of exe structures is one
		exit
	else
	{
		set pipe fd of exe structures
		create child process
		if child process
			execute exit
		wait
		duplicate read part of pipe fd to prev fd
		close all pipe
	}
}

return void
execute at child(exe structures, command string)
{
}
